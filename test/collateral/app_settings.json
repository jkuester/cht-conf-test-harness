{
  "tasks": {
    "rules": "define Target {_id: null,deleted: null,type: null,pass: null,date: null}define Contact {contact: null,reports: null}define Task {_id: null,deleted: null,doc: null,contact: null,icon: null,date: null,title: null,fields: null,resolved: null,priority: null,priorityLabel: null,reports: null,actions: null}rule GenerateEvents {when {c: Contact}then {var idx1, idx2, r, target;var now = Utils.now();const Forms = {ANC_REALIZATION: 'anc_followup',PNC_REALIZATION: 'pnc_followup',SIMPLECARE_NEWBORN_FOLLOWUP: 'newborn_followup',PNC_FOLLOWUP: 'postnatal_followup',ANC_FOLLOWUP: 'prenatal_followup',PREGNANCY_FAMILY_PLANNING: 'pregnancy_family_planning',PATIENT_ASSESSMENT_UNDER_5: 'patient_assessment',MALNUTRITION_FOLLOWUP_UNDER_5: 'malnutrition_follow_up',TREATMENT_FOLLOWUP_UNDER_5: 'treatment_followup',REFERRAL_FOLLOWUP_UNDER_5: 'referral_followup_under_5',PATIENT_ASSESSMENT_OVER_5: 'patient_assessment_over_5',TREATMENT_FOLLOWUP_OVER_5: 'treatment_followup_over_5',REFERRAL_FOLLOWUP_OVER_5: 'referral_followup',};const toDate = (val, plusDays = 0) => {const parsedDate = new Date(val);return Utils.isDateValid(parsedDate) ? Utils.addDate(new Date(parsedDate), plusDays) : undefined;};const toDateString = val => {const parsedDate = new Date(val);return Utils.isDateValid(parsedDate) ? parsedDate.toISOString().substring(0, 10) : '';};const startOfDay = val => {const date = toDateString(val);return toDate(date);};const isSomeReportInWindow = (reports, formsArray, startTime, endTime) => {if (typeof formsArray === 'string') formsArray = [ formsArray ];return formsArray.some(form => Utils.isFormSubmittedInWindow(reports, form, startTime, endTime));};const getField = (report, fieldPath) => ['fields', ...(fieldPath || '').split('.')].reduce((prev, fieldName) => {if (prev === undefined) return report;return prev[fieldName];}, report);const findOldestReport = reports => {if (!Array.isArray(reports)) throw new Error('Invalid argument: reports');if (reports.length === 0) return false;const oldestTimestamp = Math.min(...reports.map(r => r.reported_date));return reports.find(r => r.reported_date === oldestTimestamp);};const latestReportHasField = (contact, reportName, fieldName, fieldValue, mustBeMoreRecentThan) => {const latestReport = Utils.getMostRecentReport(contact.reports, reportName);const isRecentEnough = !mustBeMoreRecentThan || !latestReport || !latestReport.fields || latestReport.reported_date > mustBeMoreRecentThan;const isFieldMatch = latestReport && !!latestReport.fields && latestReport.fields[fieldName] === fieldValue;return isFieldMatch && isRecentEnough;};const ageInDays = birthDate => {birthDate = new Date(birthDate);if (!Utils.isDateValid(birthDate)) {console.warn(`ageInDays is unable to calculate age of contact from ${birthDate}`);return undefined;}const nowMs = Utils.now().getTime();const birthDateMs = birthDate.getTime();const ageInDays = (nowMs - birthDateMs) / Utils.MS_IN_DAY;return Math.floor(ageInDays);};const taskIconFromActionForm = {[Forms.ANC_REALIZATION]: 'pregnant',[Forms.PNC_REALIZATION]: 'newborn',[Forms.ANC_FOLLOWUP]: 'pregnant',[Forms.PNC_FOLLOWUP]: 'newborn',[Forms.REFERRAL_FOLLOWUP_UNDER_5]: 'treatment',[Forms.REFERRAL_FOLLOWUP_OVER_5]: 'treatment',[Forms.TREATMENT_FOLLOWUP_UNDER_5]: 'treatment',[Forms.TREATMENT_FOLLOWUP_OVER_5]: 'treatment',[Forms.MALNUTRITION_FOLLOWUP_UNDER_5]: 'treatment',[Forms.SIMPLECARE_NEWBORN_FOLLOWUP]: 'newborn',};const resolveIfClosure_isReportInEventWindow = formTitle => (contact, report, event, dueDate) => isSomeReportInWindow(contact.reports,formTitle,Utils.addDate(dueDate, -event.start).getTime(),Utils.addDate(dueDate, event.end + 1).getTime());const calculateIndexOfEvent = (passthroughToDueDate, dueDateForEventsWithout, events) => {if (!Array.isArray(events)) { throw new Error('Invalid argument events. Array expected'); }const now = Utils.now().getTime();return events.findIndex((event) => {const dueDate = event.dueDate ? event.dueDate(passthroughToDueDate) : new Date(dueDateForEventsWithout);const days = event.dueDate ? 0 : (event.days || 0);const lowerBound = Utils.addDate(dueDate, days - event.start);const upperBound = Utils.addDate(dueDate, days + event.end + 1);return now >= lowerBound.getTime() && now < upperBound.getTime();});};const calculateEventIndex = (passthroughToDueDate, events) => (calculateIndexOfEvent(passthroughToDueDate, undefined, events) + 1).toString();const taskName = (source, result) => `${source}_yields_${result}`;const taskTitle = actionForm => `task.${actionForm}`;const taskIcon = actionForm => taskIconFromActionForm[actionForm];const findPlanningFormDiscoveringPregnancy = contact => {if (!contact || !contact.reports) return undefined;const eligibleReports = contact.reports.filter(r => r.form === Forms.PREGNANCY_FAMILY_PLANNING).filter(r => !!toDate(getField(r, 'lmp_date')));return Utils.getMostRecentReport(eligibleReports, Forms.PREGNANCY_FAMILY_PLANNING);};const findInitialPncReport = contact => {if (!contact || !contact.reports) return undefined;const eligibleReports = contact.reports.filter(r => r.form === Forms.PNC_FOLLOWUP).filter(r => getField(r, 's_first_postnatal_visit.s_first_postnatal') === 'yes' && r.fields.delivery_date).filter(r => ageInDays(r.reported_date) < 100);return findOldestReport(eligibleReports);};const specificTreatmentCount = report => ['treat_malaria', 'treat_diarrhea', 'treat_ari'].filter(treatment => getField(report, treatment) === 'true').length;const modifyContentClosure_fromPatientAssessment = (followupType) => function(report, content) {content.t_follow_up_type = followupType;content.t_treat_for_diarrhea = report.fields.treat_diarrhea;content.t_treat_for_malaria = report.fields.treat_malaria;content.t_treat_for_ari = report.fields.treat_ari;content.t_treat_for_cough = report.fields.treat_cough;content.t_fast_breathing = report.fields.fast_breathing;content.t_assessment_date = toDateString(report.reported_date);content.t_referral_date = toDateString(report.reported_date);content.t_observation = report.fields.observe;content.t_follow_up_count = calculateIndexOfEvent(undefined, report.reported_date, this.definition.events) + 1;};const modifyContentClosure_over5 = function(report, content) {return modifyContentClosure_fromPatientAssessment(report.fields.treat_malaria === 'true' ? 'malaria' : 'observation').bind(this)(report, content);};const defaultedTaskTemplate = task => Object.assign({name: taskName(task.sourceForm, task.actionForm),icon: taskIcon(task.actionForm),title: taskTitle(task.actionForm),appliesTo: 'reports',appliesToType: [ task.sourceForm ],resolvedIf: resolveIfClosure_isReportInEventWindow(task.actionForm),actions: [{form: task.actionForm,modifyContent: task.modifyContent,}],}, task);const referralTemplate = (sourceForm, actionForm, assign) => {const templateData = {sourceForm,actionForm,appliesIf: (contact, report) => ['referral', 'accompany_to_cscom', 'refer_to_cscom'].some(fieldName => getField(report, fieldName) === 'true'),events: [{ days: 1, start: 0, end: 0 },{ days: 2, start: 0, end: 0 },{ days: 3, start: 0, end: 0 },],modifyContent: (report, content) => {content.t_delivery_date = toDateString(report.fields.delivery_date);content.t_lmp_date = toDateString(report.fields.lmp_date);content.t_treat_for_malaria = report.fields.treat_for_malaria;content.t_assessment_date = toDateString(report.fields.assessment_date);content.t_follow_up_count = report.fields.follow_up_type;},priority: { level: 'high' },};const overwrittenTemplateData = Object.assign({}, templateData, assign);return defaultedTaskTemplate(overwrittenTemplateData);};const specificTreatmentTemplate = (treatment, icon, days) => defaultedTaskTemplate({sourceForm: Forms.PATIENT_ASSESSMENT_UNDER_5,actionForm: Forms.TREATMENT_FOLLOWUP_UNDER_5,title: `task.treatment.${treatment}`,icon,appliesIf: (contact, report) =>getField(report, 'accompany_to_cscom') !== 'true' && report.fields.refer_to_cscom !== 'true' &&report.fields[`treat_${treatment}`] === 'true' &&specificTreatmentCount(report) === 1,resolvedIf: (contact, report, event, dueDate) => {const isClosedOut = latestReportHasField(contact, Forms.TREATMENT_FOLLOWUP_UNDER_5, 'close_out', 'true', report.reported_date);const isCausingReferral = latestReportHasField(contact, Forms.TREATMENT_FOLLOWUP_UNDER_5, 'referral', 'true', report.reported_date);const isComplete = resolveIfClosure_isReportInEventWindow(Forms.TREATMENT_FOLLOWUP_UNDER_5)(contact, report, event, dueDate);return isClosedOut || isCausingReferral || isComplete;},events: days.map(days => ({days,start: days < 5 ? 0 : 1,end:   days < 5 ? 0 : 3,})),modifyContent: modifyContentClosure_fromPatientAssessment(treatment),});const selfSpawningTemplate = (options) => ({name: `${options.formName}_yields_self`,icon: options.icon,title: `task.${options.formName}`,appliesTo: 'reports',appliesToType: [ options.formName ],appliesIf: (contact, report) => options.appliesIf(report),resolvedIf: (contact, report, event, dueDate) => {const allReportsAfter = contact.reports.filter(r => r.reported_date > report.reported_date);return isSomeReportInWindow(allReportsAfter,options.formName,Utils.addDate(dueDate, -event.start).getTime(),Utils.addDate(dueDate, event.end + 1).getTime());},events: options.events || [{start: 1,end: 3,dueDate: expectedDueDate => new Date(options.dueDate(expectedDueDate)),}],actions: [{ form: options.formName }],});const targetIconFromSourceForm = {[Forms.PATIENT_ASSESSMENT_UNDER_5]: 'treatment',[Forms.PATIENT_ASSESSMENT_OVER_5]: 'treatment',};const calculateHoursFromIllnessToAssessment = report => {const assessmentField = getField(report, 's_beginning_illness.s_assessment_time');const estimatedAssessmentOffset = {c_assessment_time_1: 8,c_assessment_time_2: 12,c_assessment_time_3: 16,c_assessment_time_4: 20,}[assessmentField] || 20;const illnessOnsetField = getField(report, 's_beginning_illness.s_when_illness');const estimatedIllnessOffset = {c_when_illness_1: -8,c_when_illness_2: 0,c_when_illness_3: 6,c_when_illness_4: 6 +12,c_when_illness_5: 6 +24,c_when_illness_6: 18 +24,c_when_illness_7: 12 +24 * 2,c_when_illness_8: 24 * 5,}[illnessOnsetField] || 24 * 5;return estimatedAssessmentOffset + estimatedIllnessOffset;};const targetIcon = form => targetIconFromSourceForm[form];const isDosageIncorrect = (report, dosageField, correctDosages) => {const patientAge = parseInt(getField(report, 'patient_age_in_months'));const dosage = getField(report, dosageField);if (!dosage) return false;const ageBetween = (low, high) => (!low || patientAge >= low) && (!high || patientAge <= high);return correctDosages.some(correctDosage =>ageBetween(correctDosage.lowAge, correctDosage.highAge) &&dosage !== correctDosage.correctDosage);};const hasMalnutritionFollowup = () => false;const AssessmentDetails = function(contact, sourceReport, filter) {console.log('id', sourceReport._id);const followups = contact.reports.filter(report => report.reported_date > sourceReport.reported_date).filter(report => sourceReport._id && getField(report, 'inputs.source_id') === sourceReport._id).filter(report => !filter || filter(report));const referralOrTreatmentFollowups = followups.filter(report => [Forms.TREATMENT_FOLLOWUP_OVER_5,Forms.TREATMENT_FOLLOWUP_UNDER_5,Forms.REFERRAL_FOLLOWUP_OVER_5,Forms.REFERRAL_FOLLOWUP_UNDER_5].includes(report.form));return {has_malnutrition_follow_up: () => followups.some(report => report.form === Forms.MALNUTRITION_FOLLOWUP_UNDER_5),ages_of_followups: () => new Set(referralOrTreatmentFollowups.map(report => {const ageInMs = startOfDay(report.reported_date).getTime() - startOfDay(sourceReport.reported_date).getTime();return Math.floor(ageInMs / Utils.MS_IN_DAY);})),};};const basicTemplate = target => Object.assign({translation_key: `target.${target.id}`,subtitle_translation_key: `target.${target.id}.subtitle`,appliesTo: 'reports',type: 'count',goal: -1,date: 'reported',}, target);const defaultedFormTargetTemplate = target => {const aggregate = Object.assign(basicTemplate(target), {icon: targetIcon(target.form),appliesToType: [target.form],});delete aggregate.form;return aggregate;};const hoursFromIllnessToAssessmentTemplate = (form, lessThanHours) => defaultedFormTargetTemplate({id: `${form}-${lessThanHours}h`,form,goal: 65,type: 'percent',appliesToType: [form],passesIf: (contact, report) => calculateHoursFromIllnessToAssessment(report) <= lessThanHours,idType: 'report',});const errorProtocolTemplate = target => Object.assign(basicTemplate(target), {appliesToType: [Forms.PATIENT_ASSESSMENT_UNDER_5],goal: 0,});const noFollowupTemplate = (fields, days) => basicTemplate({id: `no-${days * 24}h-follow-up`,icon: 'home-visit',type: 'count',appliesToType: [Forms.PATIENT_ASSESSMENT_OVER_5, Forms.PATIENT_ASSESSMENT_UNDER_5],appliesIf: (contact, report) =>ageInDays(report.reported_date) >= days + 1 &&fields.some(field => getField(report, field) === 'true') &&!AssessmentDetails(contact, report).ages_of_followups().has(days),});var targets = [basicTemplate({id: 'home_visits',icon: 'home-visit',appliesIf: (contact, report) =>report.form === 'home_visit' ||(report.form === 'pregnancy_family_planning' && getField(report, 's_reg_mode.s_reg_how_found') === 'during_home_visit') ||(report.form === 'family_planning_men' && getField(report, 's_reg_mode.s_reg_how_found') === 'during_home_visit') ||(report.form === 'patient_assessment' && getField(report, 's_registration_mode.s_how_child_found') === 'home_visit') ||(report.form === 'patient_assessment_over_5' && getField(report, 's_registration_mode.s_how_child_found') === 'home_visit'),idType: (contact, report) => {if (!contact || !contact.contact) return;const id = report.form === 'home_visit' ? contact.contact._id : contact.contact.parent && contact.contact.parent._id;const date = toDateString(report.reported_date);return `${id}-${date}`;},}),hoursFromIllnessToAssessmentTemplate(Forms.PATIENT_ASSESSMENT_UNDER_5, 24),hoursFromIllnessToAssessmentTemplate(Forms.PATIENT_ASSESSMENT_OVER_5, 24),basicTemplate({id: 'preg-first-trimester',icon: 'pregnant',appliesToType: [Forms.PREGNANCY_FAMILY_PLANNING],appliesIf: (contact, report) => getField(report, 'lmp_date') !== '',passesIf: (contact, report) => ageInDays(getField(report, 'lmp_date')) <= 14 * 7,idType: contact => contact.contact._id,type: 'percent',goal: 80,}),basicTemplate({id: 'protocol-error-percentage',icon: 'danger-warning',type: 'percent',goal: 100,appliesToType: [],}),basicTemplate({id: 'protocol-error-count',icon: 'danger-warning',appliesToType: [],goal: 0,}),errorProtocolTemplate({id: 'danger-signs-without-accompany',icon: 'iccm-danger-sign',type: 'percent',appliesIf: (contact, report) =>getField(report, 's_acc_danger_signs.has_danger_sign') === 'true' && getField(report, 'accompany_to_cscom') === 'false',}),errorProtocolTemplate({id: 'symptoms-of-malaria-without-tdr',icon: 'malaria',appliesToType: [Forms.PATIENT_ASSESSMENT_UNDER_5, Forms.PATIENT_ASSESSMENT_OVER_5],appliesIf: (contact, report) =>getField(report, 's_malaria.has_mal_danger_sign') === 'true' &&getField(report, 's_malaria.s_malaria_tdr_done') === 'no' &&getField(report, 's_malaria.s_malaria_tdr_not_done') !== 'tdr_unavailable',}),errorProtocolTemplate({id: 'fever-without-tdr',icon: 'fever-danger-sign',appliesToType: [Forms.PATIENT_ASSESSMENT_UNDER_5, Forms.PATIENT_ASSESSMENT_OVER_5],appliesIf: (contact, report) =>(getField(report, 's_temperature.s_child_temperature_pre_chw') > 37.5 || getField(report, 's_temperature.s_child_temperature_pre_chw_retake') > 37.5) &&getField(report, 's_malaria.s_malaria_tdr_done') === 'no' &&getField(report, 's_malaria.s_malaria_tdr_not_done') !== 'tdr_unavailable',}),errorProtocolTemplate({id: 'tdr-without-malaria',icon: 'malaria',appliesToType: [Forms.PATIENT_ASSESSMENT_UNDER_5, Forms.PATIENT_ASSESSMENT_OVER_5],appliesIf: (contact, report) =>getField(report, 'group_diagnosis.s_malaria_give_act') === 'yes' &&getField(report, 'tdr_result') === 'negative',}),errorProtocolTemplate({id: 'incorrect-dosage-of-act-based-combination',icon: 'medicine',appliesToType: [Forms.PATIENT_ASSESSMENT_UNDER_5, Forms.PATIENT_ASSESSMENT_OVER_5],appliesIf: (contact, report) =>getField(report, 'group_diagnosis.s_malaria_give_act') === 'yes' &&isDosageIncorrect(report, 'group_diagnosis.s_malaria_act_dosage', [{ highAge: 3 * 12, correctDosage: '2_tablets_act' },{ lowAge: 3 * 12 + 1, highAge: 7 * 12, correctDosage: '4_tablets_act' },{ lowAge: 7 * 12 + 1, highAge: 12 * 12, correctDosage: '6_tablets_act' },{ lowAge: 12 * 12 + 1, correctDosage: '8_tablets_act' },]),}),errorProtocolTemplate({id: 'diarrhea-without-zinc',icon: 'medicine',appliesIf: (contact, report) =>getField(report, 's_diarrhea.s_diarrhea_stools_a_day') === 'yes' &&getField(report, 'group_diagnosis.s_diarrhea_give_zinc') === 'no' &&getField(report, 'group_diagnosis.s_diarrhea_not_give_zinc') !== 'out_of_stock',}),errorProtocolTemplate({id: 'incorrect-dosage-of-zinc',icon: 'medicine',appliesIf: (contact, report) =>getField(report, 'group_diagnosis.s_diarrhea_give_zinc') === 'yes' &&isDosageIncorrect(report, 'group_diagnosis.s_diarrhea_zinc_dosage', [{ highAge: 1, correctDosage: '' },{ lowAge: 2, highAge: 5, correctDosage: 'c_diarrhea_zinc_dosage_2' },{ lowAge: 6, highAge: 5 * 12, correctDosage: 'c_diarrhea_zinc_dosage_3' },{ lowAge: 5 * 12 + 1, correctDosage: '' },]),}),errorProtocolTemplate({id: 'pneumonia-without-amoxicillin',icon: 'medicine',appliesIf: (contact, report) =>getField(report, 'fast_breathing') === 'true' &&getField(report, 'group_diagnosis.s_ari_give_amox') === 'no' &&getField(report, 'group_diagnosis.s_ari_not_give_amox') !== 'out_of_stock',}),errorProtocolTemplate({id: 'amoxicillin-without-pneumonia',icon: 'medicine',appliesIf: (contact, report) =>getField(report, 'fast_breathing') === 'false' &&getField(report, 'group_diagnosis.s_ari_give_amox') === 'yes',}),errorProtocolTemplate({id: 'incorrect-dosage-of-amoxicillin',icon: 'medicine',appliesIf: (contact, report) =>getField(report, 'group_diagnosis.s_ari_give_amox') === 'yes' &&isDosageIncorrect(report, 'group_diagnosis.s_ari_give_amox_dosage', [{ highAge: 1, correctDosage: '' },{ lowAge: 2, highAge: 11, correctDosage: '5_ml_amox' },{ lowAge: 12, highAge: 59, correctDosage: '10_ml_amox' },{ lowAge: 60, correctDosage: '' },]),}),errorProtocolTemplate({id: 'muac-yellow-incomplete-drugs',icon: 'home-visit',appliesIf: (contact, report) => getField(report, 'treat_malnutrition') === 'true' &&(getField(report, 'group_diagnosis.s_nutri_give_enriched_flour') !== 'yes' ||getField(report, 'group_diagnosis.s_nutri_give_vitaminA') !== 'yes' ||getField(report, 'group_diagnosis.s_nutri_give_albendazole') !== 'yes'),}),errorProtocolTemplate({id: 'incorrect-dosage-of-vitamin-a',icon: 'medicine',appliesIf: (contact, report) =>getField(report, 'group_diagnosis.s_nutri_give_vitaminA') === 'yes' &&isDosageIncorrect(report, 'group_diagnosis.s_nutri_give_vitaminA_dosage', [{ highAge: 5, correctDosage: '' },{ lowAge: 6, highAge: 11, correctDosage: 'blue_capsule_vita' },{ lowAge: 12, correctDosage: 'red_capsule_vita' },]),}),errorProtocolTemplate({id: 'incorrect-dosage-of-albendazole',icon: 'medicine',appliesIf: (contact, report) => getField(report, 'group_diagnosis.s_nutri_give_albendazole') === 'yes',passesIf: (contact, report) => isDosageIncorrect(report, 'group_diagnosis.s_nutri_give_albendazole_dosage', [{ highAge: 5, correctDosage: '' },{ lowAge: 6, highAge: 11, correctDosage: '200_mg_albendazole' },{ lowAge: 12, highAge: 59, correctDosage: '400_mg_albendazole' },{ lowAge: 60, correctDosage: '' },]),}),errorProtocolTemplate({id: 'incorrect-dosage-of-paracetamol',icon: 'medicine',appliesIf: (contact, report) =>getField(report, 'group_diagnosis.s_give_paracetamol') === 'yes' &&isDosageIncorrect(report, 'group_diagnosis.s_give_paracetamol_dosage', [{ highAge: 1, correctDosage: '' },{ lowAge: 2, highAge: 11, correctDosage: 'quarter_tab_paracetamol' },{ lowAge: 12, highAge: 5 * 12 - 1, correctDosage: 'half_tab_paracetamol' },{ lowAge: 5 * 12, highAge: 12 * 12 - 1, correctDosage: 'one_tab_paracetamol' },{ lowAge: 12 * 12, highAge: 15 * 12 - 1, correctDosage: 'half_tab_paracetamol' },{ lowAge: 15 * 12, correctDosage: 'two_tab_paracetamol' },]),}),noFollowupTemplate(['referral', 'treat_malaria', 'treat_ari'], 1),noFollowupTemplate(['referral', 'treat_malaria', 'treat_ari'], 2),noFollowupTemplate(['referral', 'treat_malaria', 'treat_ari'], 3),noFollowupTemplate(['referral', 'treat_diarrhea', 'treat_ari'], 5),errorProtocolTemplate({id: 'aggrevated-no-accompany',icon: 'medicine',appliesToType: [Forms.TREATMENT_FOLLOWUP_UNDER_5, Forms.TREATMENT_FOLLOWUP_OVER_5],appliesIf: (contact, report) =>getField(report, 's_disease_progression.s_how_disease_progressing') === 'aggravated' &&getField(report, 'accompany_to_cscom') === 'false',}),errorProtocolTemplate({id: 'unchanged-no-refer',icon: 'medicine',appliesToType: [Forms.TREATMENT_FOLLOWUP_UNDER_5, Forms.TREATMENT_FOLLOWUP_OVER_5],appliesIf: (contact, report) =>getField(report, 's_disease_progression.s_how_disease_progressing') === 'no_change' &&(getField(report, 'group_diagnosis.s_accompany_refer_under5') === 'no' ||getField(report, 'group_diagnosis.s_accompany_refer_over5') === 'no') &&getField(report, 'follow_up_count') > 1,}),errorProtocolTemplate({id: 'not-improved-3d-no-accompany',icon: 'medicine',appliesToType: [Forms.TREATMENT_FOLLOWUP_UNDER_5, Forms.TREATMENT_FOLLOWUP_OVER_5],appliesIf: (contact, report) =>['aggravated', 'no_change'].includes(getField(report, 's_disease_progression.s_how_disease_progressing')) &&(getField(report, 'group_diagnosis.s_accompany_refer_under5') === 'no' ||getField(report, 'group_diagnosis.s_accompany_refer_over5') === 'no') &&getField(report, 'follow_up_count') === '3',}),errorProtocolTemplate({id: 'not-improved-5d-no-accompany',icon: 'medicine',appliesToType: [Forms.TREATMENT_FOLLOWUP_UNDER_5, Forms.TREATMENT_FOLLOWUP_OVER_5],appliesIf: (contact, report) =>['aggravated', 'no_change'].includes(getField(report, 's_disease_progression.s_how_disease_progressing')) &&(getField(report, 'group_diagnosis.s_accompany_refer_under5') === 'no' ||getField(report, 'group_diagnosis.s_accompany_refer_over5') === 'no') &&getField(report, 'follow_up_count') === '4',}),];var tasks = [defaultedTaskTemplate({sourceForm: Forms.PREGNANCY_FAMILY_PLANNING,actionForm: Forms.ANC_FOLLOWUP,appliesTo: 'contacts',appliesToType: ['person'],appliesIf: contact => {const pregnancyForm = findPlanningFormDiscoveringPregnancy(contact);const closedReports = contact.reports.filter(r => getField(r, 'close_out') === 'true');const mostRecentIsClosed = !!Utils.getMostRecentReport(closedReports, Forms.ANC_FOLLOWUP);return !!pregnancyForm && !mostRecentIsClosed;},events: [{days: 0,start: 0,end: 3,dueDate: contact => {const pregnancyForm = findPlanningFormDiscoveringPregnancy(contact);if (!pregnancyForm) throw new Error('Failed result from findPlanningFormDiscoveringPregnancy');return toDate(pregnancyForm.reported_date);}},...[14, 28, 42, 56, 70, 84, 98, 112, 126, 140, 154, 168, 182, 196, 203, 210, 217, 224, 231, 238, 245, 252, 259, 266, 273, 280, 287].map(days => ({start: 1,end:   3,dueDate: contact => {const pregnancyForm = findPlanningFormDiscoveringPregnancy(contact);if (!pregnancyForm) throw new Error('Failed result from findPlanningFormDiscoveringPregnancy');return toDate(pregnancyForm.fields.lmp_date, days);},})),],modifyContent: function(contact, content) {content.t_follow_up_count = calculateEventIndex(contact, this.definition.events.splice(1));const pregnancyForm = findPlanningFormDiscoveringPregnancy(contact);content.t_lmp_date = toDateString(pregnancyForm.fields.lmp_date);content.t_cpn_visits = 'not_first_follow_up';content.t_fp_method = pregnancyForm.fields.fp_method;},maxVisibleTasks: 1,}),defaultedTaskTemplate({sourceForm: Forms.PREGNANCY_FAMILY_PLANNING,actionForm: Forms.ANC_REALIZATION,appliesIf: (contact, report) => !!toDate(getField(report, 's_reg_pregnancy.s_anc_date')),events: [{start: 1,end: 3,dueDate: report => toDate(report.fields.s_reg_pregnancy.s_anc_date),}],}),defaultedTaskTemplate({sourceForm: Forms.PNC_FOLLOWUP,actionForm: Forms.PNC_FOLLOWUP,appliesTo: 'contacts',appliesToType: ['person'],appliesIf: contact => {const initialPncReport = findInitialPncReport(contact);const closedReports = contact.reports.filter(r => getField(r, 'close_out') === 'true');const hasRecentCloseOut = !!Utils.getMostRecentReport(closedReports, Forms.PNC_FOLLOWUP);return !!initialPncReport && !hasRecentCloseOut;},events: [1, 2, 3, 5, 12, 19, 26, 33, 40, 47].map(days => ({start: days < 5 ? 0 : 1,end:   days < 5 ? 0 : 3,dueDate: contact => {const initialPncReport = findInitialPncReport(contact);if (!initialPncReport) throw new Error('Unable to find expected result from findInitialPncReport');return toDate(initialPncReport.fields.delivery_date, days);},})),modifyContent: function(contact, content) {content.t_follow_up_count = calculateEventIndex(contact, this.definition.events);const initialPncReport = findInitialPncReport(contact);content.t_delivery_date = toDateString(initialPncReport.fields.delivery_date);},}),defaultedTaskTemplate({sourceForm: Forms.PNC_FOLLOWUP,actionForm: Forms.PNC_REALIZATION,appliesIf: (contact, report) => getField(report, 'pnc_visits') && !!toDate(report.fields.pnc_visits.pnc_visit_date),events: [{start: 1,end: 3,dueDate: report => toDate(report.fields.pnc_visits.pnc_visit_date),}],}),referralTemplate(Forms.ANC_FOLLOWUP, Forms.REFERRAL_FOLLOWUP_OVER_5),referralTemplate(Forms.PNC_FOLLOWUP, Forms.REFERRAL_FOLLOWUP_OVER_5),referralTemplate(Forms.PATIENT_ASSESSMENT_OVER_5, Forms.REFERRAL_FOLLOWUP_OVER_5),referralTemplate(Forms.TREATMENT_FOLLOWUP_OVER_5, Forms.REFERRAL_FOLLOWUP_OVER_5),referralTemplate(Forms.TREATMENT_FOLLOWUP_UNDER_5, Forms.REFERRAL_FOLLOWUP_UNDER_5),referralTemplate(Forms.SIMPLECARE_NEWBORN_FOLLOWUP, Forms.REFERRAL_FOLLOWUP_UNDER_5),referralTemplate(Forms.PATIENT_ASSESSMENT_UNDER_5, Forms.REFERRAL_FOLLOWUP_UNDER_5, {modifyContent: modifyContentClosure_fromPatientAssessment('referral'),}),referralTemplate(Forms.MALNUTRITION_FOLLOWUP_UNDER_5, Forms.REFERRAL_FOLLOWUP_UNDER_5),specificTreatmentTemplate('malaria', 'mosquito', [1, 2, 3]),specificTreatmentTemplate('ari', 'people-chw', [1, 2, 3, 5]),specificTreatmentTemplate('diarrhea', 'people-chw', [5]),defaultedTaskTemplate({sourceForm: Forms.PATIENT_ASSESSMENT_UNDER_5,actionForm: Forms.TREATMENT_FOLLOWUP_UNDER_5,title: 'task.treatment.multiple',appliesIf: (contact, report) =>getField(report, 'accompany_to_cscom') !== 'true' &&getField(report, 'refer_to_cscom') !== 'true' &&specificTreatmentCount(report) > 1,resolvedIf: (contact, report, event, dueDate) => {const isClosedOut = latestReportHasField(contact, Forms.TREATMENT_FOLLOWUP_UNDER_5, 'close_out', 'true', report.reported_date);const hasCausedRefferral = latestReportHasField(contact, Forms.TREATMENT_FOLLOWUP_UNDER_5, 'referral', 'true', report.reported_date);const isComplete = resolveIfClosure_isReportInEventWindow(Forms.TREATMENT_FOLLOWUP_UNDER_5)(contact, report, event, dueDate);return isClosedOut || hasCausedRefferral || isComplete;},events: [{ days: 1, start: 0, end: 0 },{ days: 2, start: 0, end: 0 },{ days: 3, start: 0, end: 0 },{ days: 5, start: 1, end: 3 },],modifyContent: modifyContentClosure_fromPatientAssessment('multiple'),}),defaultedTaskTemplate({sourceForm: Forms.PATIENT_ASSESSMENT_UNDER_5,actionForm: Forms.MALNUTRITION_FOLLOWUP_UNDER_5,title: 'task.treatment.malnutrition',appliesTo: 'contacts',appliesToType: ['person'],appliesIf: contact => contact.reports.some(report => getField(report, 'treat_malnutrition') === 'true'),resolvedIf: (contact, report, event, dueDate) =>latestReportHasField(contact, Forms.MALNUTRITION_FOLLOWUP_UNDER_5, 'close_out', 'true') ||resolveIfClosure_isReportInEventWindow(Forms.MALNUTRITION_FOLLOWUP_UNDER_5)(contact, report, event, dueDate),events: [7, 14, 21, 28, 42, 56, 70, 84].map(days => ({start: 1,end:   3,dueDate: contact => {const sourceReport = Utils.getMostRecentReport(contact.reports, Forms.PATIENT_ASSESSMENT_UNDER_5);return toDate(sourceReport.reported_date, days);},})),modifyContent: function(contact, content) {const eligibleReports = contact.reports.filter(report =>report.form === Forms.PATIENT_ASSESSMENT_UNDER_5 &&getField(report, 'treat_malnutrition') === 'true');const sourceReport = Utils.getMostRecentReport(eligibleReports, Forms.PATIENT_ASSESSMENT_UNDER_5);content.t_assessment_date = toDateString(sourceReport.reported_date);content.t_follow_up_count = calculateEventIndex(contact, this.definition.events);const isYellow = report => getField(report, 'shakir_strip_color') === 'yellow';let followups = contact.reports.filter(report => report.form === Forms.MALNUTRITION_FOLLOWUP_UNDER_5).sort((a, b) => a.reported_date < b.reported_date);const firstNonYellow = followups.findIndex(r => !isYellow(r));content.t_num_yellow_strips = (firstNonYellow >= 0 ? firstNonYellow : followups.length).toString();},}),defaultedTaskTemplate({sourceForm: Forms.PATIENT_ASSESSMENT_OVER_5,actionForm: Forms.TREATMENT_FOLLOWUP_OVER_5,icon: 'mosquito',title: 'task.treatment.malaria',appliesIf: (contact, report) => getField(report, 'referral') !== 'true' && (report.fields.treat_malaria === 'true' || report.fields.observe === 'true'),resolvedIf: (contact, report, event, dueDate) =>latestReportHasField(contact, Forms.TREATMENT_FOLLOWUP_OVER_5, 'close_out', 'true', report.reported_date) ||latestReportHasField(contact, Forms.TREATMENT_FOLLOWUP_OVER_5, 'referral', 'true', report.reported_date) ||resolveIfClosure_isReportInEventWindow(Forms.TREATMENT_FOLLOWUP_OVER_5)(contact, report, event, dueDate),events: [{ days: 1, start: 0, end: 0 },{ days: 2, start: 0, end: 0 },{ days: 3, start: 0, end: 0 },],modifyContent: modifyContentClosure_over5,}),selfSpawningTemplate({formName: Forms.PNC_REALIZATION,icon: 'newborn',appliesIf: report => getField(report, 'next_pnc.s_next_pnc') === 'yes',dueDate: report => report.fields.next_pnc.s_next_pnc_date,}),selfSpawningTemplate({formName: Forms.ANC_REALIZATION,icon: 'pregnant',appliesIf: report => getField(report, 'next_anc.s_next_anc') === 'yes',dueDate: report => report.fields.next_anc.s_next_anc_date,}),defaultedTaskTemplate({sourceForm: Forms.SIMPLECARE_NEWBORN_FOLLOWUP,actionForm: Forms.SIMPLECARE_NEWBORN_FOLLOWUP,appliesTo: 'contacts',appliesToType: ['person'],appliesIf: contact => {const contactAgeInDays = ageInDays(contact.contact.date_of_birth);const hasNewBornForm = contact.reports.filter(r => r.form === Forms.SIMPLECARE_NEWBORN_FOLLOWUP).length > 0;const hasCloseOut = contact.reports.filter(r => getField(r, 'close_out') === 'true').length > 0;return contactAgeInDays < 30 && hasNewBornForm && !hasCloseOut;},resolvedIf: resolveIfClosure_isReportInEventWindow(Forms.SIMPLECARE_NEWBORN_FOLLOWUP),events: [1, 2, 5, 12, 19, 26].map(days => ({start: days < 6 ? 0 : 1,end:   days === 1 ? 0 : days < 6 ? 1 : 3,dueDate: contact => toDate(contact.contact.date_of_birth, days),})),modifyContent: function(contact, content) {content.t_follow_up_count = calculateEventIndex(contact, this.definition.events);},}),];function bindToContext(toBind, context) {if (toBind && typeof toBind === 'function') {toBind = toBind.bind(context);}return toBind;}function bindTargetToContext(target) {const context = { definition: Object.assign({}, target) };['passesIf', 'appliesIf', 'idType', 'emitCustom'].forEach(function(toBind) {target[toBind] = bindToContext(target[toBind], context);});return target;}function bindTaskToContext(task) {const context = { definition: Object.assign({}, task) };['appliesIf', 'resolvedIf' ].forEach(function(toBind) {task[toBind] = bindToContext(task[toBind], context);});if (Array.isArray(task.events)) {for (let event of task.events) {if (event.dueDate) {event.dueDate = bindToContext(event.dueDate, context);}}}if (Array.isArray(task.actions)) {for (let action of task.actions) {if (action.modifyContent) {action.modifyContent = bindToContext(action.modifyContent, context);}}}return task;}for(idx1=0; idx1<targets.length; ++idx1) {target = bindTargetToContext(targets[idx1]);switch(target.appliesTo) {case 'contacts':if(c.contact && (!target.appliesToType || target.appliesToType.indexOf(c.contact.type) !== -1)) {emitContactBasedTargetFor(c, target);}break;case 'reports':for(idx2=0; idx2<c.reports.length; ++idx2) {r = c.reports[idx2];if (!target.appliesToType || target.appliesToType.indexOf(r.form) !== -1) {emitReportBasedTargetFor(c, r, target);}}break;default:throw new Error('Unrecognised appliesTo value: ' + target.appliesTo);}}if(tasks) {for(idx1=0; idx1<tasks.length; ++idx1) {var task = bindTaskToContext(tasks[idx1]);switch(task.appliesTo) {case 'reports':case 'scheduled_tasks':for(idx2=0; idx2<c.reports.length; ++idx2) {r = c.reports[idx2];emitTasksForSchedule(c, task, r);}break;case 'contacts':if(c.contact && task.appliesToType.indexOf(c.contact.type) !== -1) {emitTasksForSchedule(c, task);}break;default:throw new Error('unrecognised task type: ' + task.appliesTo);}}}function emitTasksForSchedule(c, schedule, r) {var i;if(r && schedule.appliesToType && schedule.appliesToType.indexOf(r.form) === -1) {return;}if(schedule.appliesTo !== 'scheduled_tasks' &&schedule.appliesIf && !schedule.appliesIf(c, r)) {return;}if(schedule.appliesTo === 'scheduled_tasks'){if(r && schedule.appliesIf) {if(!r.scheduled_tasks) {return;}for (i = 0; i < r.scheduled_tasks.length; i++) {if(schedule.appliesIf(c, r, i)) {emitForEvents(i);}}}} else {emitForEvents();}function emitForEvents(scheduledTaskIdx) {var i, dueDate = null, event, priority, task, emitted = 0;for (i = 0; i < schedule.events.length; i++) {event = schedule.events[i];if(r) {if(event.dueDate) {dueDate = event.dueDate(r, event, scheduledTaskIdx);} else if(scheduledTaskIdx !== undefined) {dueDate = new Date(Utils.addDate(new Date(r.scheduled_tasks[scheduledTaskIdx].due), event.days));} else {dueDate = new Date(Utils.addDate(new Date(r.reported_date), event.days));}} else {if(event.dueDate) {dueDate = event.dueDate(c, event, scheduledTaskIdx);} else {dueDate = new Date(Utils.addDate(new Date(c.contact.reported_date), event.days));}}const isTimely = Utils.isTimely(dueDate, event);if (!isTimely) {continue;}task = {_id: `${r ? r._id : c.contact._id}-${schedule.id}-${event.id || i}`,deleted: !!((c.contact && c.contact.deleted) || r ? r.deleted : false),doc: c,contact: c.contact,icon: schedule.icon,date: dueDate,title: schedule.title,resolved: (!!schedule.maxVisibleTasks && emitted >= schedule.maxVisibleTasks) || schedule.resolvedIf(c, r, event, dueDate, scheduledTaskIdx),actions: schedule.actions.map(initActions),};if(scheduledTaskIdx !== undefined) {task._id += '-' + scheduledTaskIdx;}priority = schedule.priority;if(typeof priority === 'function') {priority = priority(c, r);}if(priority) {task.priority = priority.level;task.priorityLabel = priority.label;}if (!task.resolved) {emitted++;}emit('task', new Task(task));}}function initActions(def) {var content = {source: 'task',source_id: r && r._id,contact: c.contact,};if(def.modifyContent) def.modifyContent(r || c, content);return {type: 'report',form: def.form,label: def.label || 'Follow up',content: content,};}}function emitContactBasedTargetFor(c, targetConfig) {if(targetConfig.appliesIf && !targetConfig.appliesIf(c)) return;if(targetConfig.emitCustom) {targetConfig.emitCustom(c);return;}var pass = !targetConfig.passesIf || !!targetConfig.passesIf(c);var instance = createTargetInstance(targetConfig.id, c.contact, pass);if(typeof targetConfig.date === 'function') {instance.date = targetConfig.date(c);} else if(targetConfig.date === undefined || targetConfig.date === 'now') {instance.date = now.getTime();} else if(targetConfig.date === 'reported') {instance.date = c.reported_date;} else {throw new Error('Unrecognised value for target.date: ' + targetConfig.date);}emitTargetInstance(instance);}function emitReportBasedTargetFor(c, r, targetConf) {var instance, pass;if(targetConf.appliesIf && !targetConf.appliesIf(c, r)) return;if(targetConf.emitCustom) {targetConf.emitCustom(c, r);return;}pass = !targetConf.passesIf || !!targetConf.passesIf(c, r);instance = createTargetInstance(targetConf.id, r, pass);const defaultId = typeof targetConf.idType === 'function' ?targetConf.idType(c, r) :targetConf.idType === 'report' ? r._id : c.contact._id;instance._id = defaultId + '-' + targetConf.id;if (targetConf.date === 'now') {instance.date = now.getTime();}emitTargetInstance(instance);}function createTargetInstance(type, doc, pass) {return new Target({_id: doc._id + '-' + type,deleted: !!doc.deleted,type: type,pass: pass,date: doc.reported_date});}function emitTargetInstance(i) {emit('target', i);}emit('_complete', { _id: true });}}"
  },
  "contact_summary": "var ContactSummary = {}; !function(e,t){if('object'==typeof exports&&'object'==typeof module)module.exports=t();else if('function'==typeof define&&define.amd)define([],t);else{var n=t();for(var o in n)('object'==typeof exports?exports:e)[o]=n[o]}}(ContactSummary,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(e,'__esModule',{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&'object'==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,'default',{enumerable:!0,value:e}),2&t&&'string'!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,'a',t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p='',n(n.s=1)}([function(e,t){const n={ANC_REALIZATION:'anc_followup',PNC_REALIZATION:'pnc_followup',SIMPLECARE_NEWBORN_FOLLOWUP:'newborn_followup',PNC_FOLLOWUP:'postnatal_followup',ANC_FOLLOWUP:'prenatal_followup',PREGNANCY_FAMILY_PLANNING:'pregnancy_family_planning',FAMILY_PLANNING_FOR_MEN:'family_planning_men',PATIENT_ASSESSMENT_UNDER_5:'patient_assessment',MALNUTRITION_FOLLOWUP_UNDER_5:'malnutrition_follow_up',TREATMENT_FOLLOWUP_UNDER_5:'treatment_followup',REFERRAL_FOLLOWUP_UNDER_5:'referral_followup_under_5',PATIENT_ASSESSMENT_OVER_5:'patient_assessment_over_5',TREATMENT_FOLLOWUP_OVER_5:'treatment_followup_over_5',REFERRAL_FOLLOWUP_OVER_5:'referral_followup',SUPERVISOR_CALENDAR:'supervision_calendar',SUPERVISOR_VISIT_REALIZATION:'supervision_visit_realization',SUPERVISOR_WITH_CHW_CONFIRMATION:'supervision_with_chw_confirmation',SUPERVISOR_WITHOUT_CHW_CONFIRMATION:'supervision_without_chw_confirmation',INDIVIDUAL_FEEDBACK_CONFIRMATION:'individual_feedback_confirmation'},o=(e,t)=>['fields',...(t||'').split('.')].reduce((t,n)=>void 0===t?e:t[n],e);e.exports={Forms:n,isReportHomeVisit:e=>!!e&&('home_visit'===e.form||e.form===n.PREGNANCY_FAMILY_PLANNING&&'during_home_visit'===o(e,'s_reg_mode.s_reg_how_found')||e.form===n.FAMILY_PLANNING_FOR_MEN&&'during_home_visit'===o(e,'s_reg_mode.s_reg_how_found')||e.form===n.PATIENT_ASSESSMENT_UNDER_5&&'home_visit'===o(e,'s_registration_mode.s_how_child_found')||e.form===n.PATIENT_ASSESSMENT_OVER_5&&'home_visit'===o(e,'s_registration_mode.s_how_child_found')),getField:o}},function(e,t,n){var o=n(2),i=n(4);e.exports=i(o,contact,reports)},function(e,t,n){const{isReportHomeVisit:o}=n(0),{isUhcEnabled:i,oldestHomeVisitTimestamp:r,numberOfDaysWithHomeVisits:a}=n(3),s={muted:'person'===contact.type&&lineage[0]&&!!lineage[0].muted,hh_contact:lineage[0]&&lineage[0].contact&&lineage[0].contact.name},l=[{appliesToType:'person',label:'contact.age',value:contact.date_of_birth,filter:'age',width:3},{appliesToType:'person',label:'Phone Number',value:contact.phone,filter:'phone',width:3},{appliesToType:'person',label:'contact.sex',value:contact.sex,translate:!0,width:3},{appliesToType:'person',label:'contact.external_id',value:contact.external_id,width:3},{appliesToType:'person',label:'contact.parent',value:lineage,filter:'lineage'},{appliesToType:'clinic',label:'contact.parent',value:lineage,filter:'lineage'}];if(i(lineage)){const e=reports.filter(o);l.push({appliesToType:'person',label:'contacts.results.sort.date.last.visited',value:r(e),filter:'simpleDate',translate:!0}),l.push({appliesToType:'person',appliesIf:()=>e.length>0,label:'contact.last.visit.current.month',value:a(e)})}e.exports={fields:l,cards:[],context:s}},function(e,t,n){const{getField:o}=n(0);e.exports={isUhcEnabled:()=>lineage[0]&&lineage[0].contact&&!!lineage[0].contact.is_uhc_enabled,oldestHomeVisitTimestamp:e=>e.reduce((e,t)=>Math.max(t.reported_date,e),-1),numberOfDaysWithHomeVisits:(e,t)=>{const{startDate:n,endDate:i}=((e=new Date)=>{const t=new Date(e);t.setHours(0,0,0,0);const n=new Date(e);return n.setHours(23,59,59,999),t.getDate()<26?t.setMonth(t.getMonth()-1):n.setMonth(n.getMonth()+1),t.setDate(26),t.setHours(0,-t.getTimezoneOffset()),n.setDate(25),n.setHours(0,-n.getTimezoneOffset()),{startDate:t,endDate:n}})(t),r=e.map(e=>{const t='home_visit'===e.form&&!!o(e,'submit_date.visit_date')&&'no'===o(e,'submit_date.c_choose_date');return new Date(t?o(e,'submit_date.visit_date'):parseInt(e.reported_date))}).filter(e=>e>=n&&e<=i).map(e=>e.getDate());return new Set(r).size}}},function(e,t){function n(e,t,n){if(e.appliesIf(n)){var o='function'==typeof e.fields?e.fields(n):e.fields.filter(function(e){switch(typeof e.appliesIf){case'undefined':return!0;case'function':return e.appliesIf(n);default:return e.appliesIf}}).map(function(e){var t={};return i(e,t,'label'),i(e,t,'value'),i(e,t,'translate'),i(e,t,'filter'),i(e,t,'width'),i(e,t,'icon'),e.context&&(t.context={},i(e.context,t.context,'count'),i(e.context,t.context,'total')),t});return e.modifyContext&&e.modifyContext(t,n),{label:e.label,fields:o}}function i(e,t,o){switch(typeof e[o]){case'undefined':return;case'function':t[o]=e[o](n);break;default:t[o]=e[o]}}}e.exports=function(e,t,o){var i=e.fields||[],r=e.context||{},a=e.cards||[],s={cards:[],fields:i.filter(function(e){if((e.appliesToType===t.type||'!'===e.appliesToType.charAt(0)&&e.appliesToType.slice(1)!==t.type)&&(!e.appliesIf||e.appliesIf()))return delete e.appliesToType,delete e.appliesIf,!0})};return a.forEach(function(e){var i,a,l,p;if('report'===e.appliesToType)for(i=0;i<o.length;++i)a=o[i],!(p=a)||p.errors&&p.errors.length||(l=n(e,r,a))&&s.cards.push(l);else{if(t.type!==e.appliesToType)return;(l=n(e,r))&&s.cards.push(l)}}),s.context=r,s}}])}); return ContactSummary;"
}